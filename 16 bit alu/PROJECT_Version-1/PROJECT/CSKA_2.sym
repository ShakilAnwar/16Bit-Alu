USER SYMBOL by DSCH 3.5
DATE 20-Oct-18 11:24:41 PM
SYM  #CSKA
BB(0,0,80,60)
TITLE 10 -7  #CSKA
MODEL 6000
REC(5,5,70,50)
PIN(0,10,0.00,0.00)A
PIN(0,30,0.00,0.00)B
PIN(15,0,0.00,0.00)SUB
PIN(35,0,0.00,0.00)CIN
PIN(55,0,0.00,0.00)C2
PIN(65,0,0.00,0.00)C3
PIN(45,0,0.00,0.00)C1
PIN(55,60,0.00,0.00)SET
PIN(0,50,0.00,0.00)LESS
PIN(80,30,2.00,1.00)out3
PIN(25,60,2.00,1.00)COUT
LIG(0,10,5,10)
LIG(0,30,5,30)
LIG(15,0,15,5)
LIG(35,0,35,5)
LIG(55,0,55,5)
LIG(65,0,65,5)
LIG(45,0,45,5)
LIG(55,55,55,60)
LIG(0,50,5,50)
LIG(75,30,80,30)
LIG(25,55,25,60)
LIG(5,5,5,55)
LIG(5,5,75,5)
LIG(75,5,75,55)
LIG(75,55,5,55)
VLG module 2NDSTEPMOD_3( A,B,SUB,CIN,C2,C3,C1,SET,
VLG  LESS,out3,COUT);
VLG  input A,B,SUB,CIN,C2,C3,C1,SET;
VLG  input LESS;
VLG  output out3,COUT;
VLG  wire w4,w9,w10,w11,w12,w13,w14,w20;
VLG  wire w21,w22,w23,w24,w25,w26,w27,w28;
VLG  wire w29,w30,w31,w32,w33,w34,w35,w36;
VLG  wire w37,w38,w39,w40,w41,w42,w43,w44;
VLG  wire w45,w46,w47,w48,w49,w50,w51,w52;
VLG  wire w53,w54,w55,w56,w57,w58,w59,w60;
VLG  wire w61,w62,w63,w64,w65,w66,w67,w68;
VLG  wire w69,w70,w71,w72,w73,w74,w75,w76;
VLG  wire w77,w78,w79,w80,w81,w82,w83,w84;
VLG  wire w85,w86,w87,w88,w89,w90,w91,w92;
VLG  wire w93,w94,w95,w96,w97,w98,w99,w100;
VLG  wire w101,w102,w103,w104,w105,w106,w107,w108;
VLG  wire w109,w110,w111,w112,w113,w114,w115,w116;
VLG  wire w117,w118,w119,w120,w121,w122,w123,w124;
VLG  wire w125,w126,w127,w128,w129,w130;
VLG  nor #(3) nor2_1(w9,A,B);
VLG  nand #(2) nand2_2(w10,B,A);
VLG  or #(3) or2_3(w11,A,B);
VLG  and #(3) and2_4(w12,B,A);
VLG  xor #(3) xor2_5(w13,A,B);
VLG  xnor #(3) xnor2_6(w14,A,B);
VLG  xor #(4) xor2_7(w4,B,SUB);
VLG  xor #(3) xor2_1_8(w20,A,w4);
VLG  xor #(2) xor2_2_9(SET,w20,CIN);
VLG  and #(2) and2_3_10(w21,w20,CIN);
VLG  and #(2) and2_4_11(w22,w4,A);
VLG  or #(2) or2_5_12(COUT,w21,w22);
VLG  not #(3) inv_1_13(w23,C1);
VLG  not #(3) inv_2_14(w24,C3);
VLG  not #(3) inv_3_15(w25,C2);
VLG  or #(1) or3_1_4_16(w29,w26,w27,w28);
VLG  or #(1) or3_2_5_17(w32,w29,w30,w31);
VLG  or #(1) or3_3_6_18(w35,w32,w33,w34);
VLG  or #(1) or2_4_7_19(out3,w35,w36);
VLG  xor #(2) xor2_1_5_8_20(w39,w37,w38);
VLG  xor #(1) xor2_2_6_9_21(w41,w39,w40);
VLG  and #(1) and2_3_7_10_22(w42,w40,w39);
VLG  and #(1) and2_4_8_11_23(w43,w38,w37);
VLG  or #(1) or2_5_9_12_24(w44,w42,w43);
VLG  and #(1) and3_1_10_13_25(w48,w45,w46,w47);
VLG  and #(1) and2_2_11_14_26(w50,w49,w48);
VLG  xor #(2) xor2_1_3_12_15_27(w53,w51,w52);
VLG  xor #(1) xor2_2_4_13_16_28(w55,w53,w54);
VLG  and #(1) and2_3_5_14_17_29(w56,w54,w53);
VLG  and #(1) and2_4_6_15_18_30(w57,w52,w51);
VLG  or #(1) or2_5_7_16_19_31(w58,w56,w57);
VLG  and #(1) and3_1_20_32(w59,w11,w23,C2);
VLG  and #(1) and2_2_21_33(w28,w24,w59);
VLG  xor #(2) xor2_1_3_22_34(w62,w60,w61);
VLG  xor #(1) xor2_2_4_23_35(w64,w62,w63);
VLG  and #(1) and2_3_5_24_36(w65,w63,w62);
VLG  and #(1) and2_4_6_25_37(w66,w61,w60);
VLG  or #(1) or2_5_7_26_38(w67,w65,w66);
VLG  and #(1) and3_1_27_39(w68,w12,w23,C2);
VLG  and #(1) and2_2_28_40(w30,C3,w68);
VLG  xor #(2) xor2_1_3_29_41(w71,w69,w70);
VLG  xor #(1) xor2_2_4_30_42(w73,w71,w72);
VLG  and #(1) and2_3_5_31_43(w74,w72,w71);
VLG  and #(1) and2_4_6_32_44(w75,w70,w69);
VLG  or #(1) or2_5_7_33_45(w76,w74,w75);
VLG  and #(1) and3_1_34_46(w77,w13,C1,w25);
VLG  and #(1) and2_2_35_47(w31,w24,w77);
VLG  xor #(2) xor2_1_3_36_48(w80,w78,w79);
VLG  xor #(1) xor2_2_4_37_49(w82,w80,w81);
VLG  and #(1) and2_3_5_38_50(w83,w81,w80);
VLG  and #(1) and2_4_6_39_51(w84,w79,w78);
VLG  or #(1) or2_5_7_40_52(w85,w83,w84);
VLG  and #(1) and3_1_41_53(w86,w14,C1,w25);
VLG  and #(1) and2_2_42_54(w33,C3,w86);
VLG  xor #(2) xor2_1_3_43_55(w89,w87,w88);
VLG  xor #(1) xor2_2_4_44_56(w91,w89,w90);
VLG  and #(1) and2_3_5_45_57(w92,w90,w89);
VLG  and #(1) and2_4_6_46_58(w93,w88,w87);
VLG  or #(1) or2_5_7_47_59(w94,w92,w93);
VLG  and #(1) and3_1_48_60(w95,SET,C1,C2);
VLG  and #(1) and2_2_49_61(w34,w24,w95);
VLG  xor #(2) xor2_1_3_50_62(w98,w96,w97);
VLG  xor #(1) xor2_2_4_51_63(w100,w98,w99);
VLG  and #(1) and2_3_5_52_64(w101,w99,w98);
VLG  and #(1) and2_4_6_53_65(w102,w97,w96);
VLG  or #(1) or2_5_7_54_66(w103,w101,w102);
VLG  and #(1) and3_1_55_67(w104,w10,w23,w25);
VLG  and #(1) and2_2_56_68(w27,C3,w104);
VLG  xor #(2) xor2_1_3_57_69(w107,w105,w106);
VLG  xor #(1) xor2_2_4_58_70(w109,w107,w108);
VLG  and #(1) and2_3_5_59_71(w110,w108,w107);
VLG  and #(1) and2_4_6_60_72(w111,w106,w105);
VLG  or #(1) or2_5_7_61_73(w112,w110,w111);
VLG  and #(1) and3_1_62_74(w113,w9,w23,w25);
VLG  and #(1) and2_2_63_75(w26,w24,w113);
VLG  xor #(2) xor2_1_3_64_76(w116,w114,w115);
VLG  xor #(1) xor2_2_4_65_77(w118,w116,w117);
VLG  and #(1) and2_3_5_66_78(w119,w117,w116);
VLG  and #(1) and2_4_6_67_79(w120,w115,w114);
VLG  or #(1) or2_5_7_68_80(w121,w119,w120);
VLG  and #(1) and3_1_69_81(w122,LESS,C1,C2);
VLG  and #(1) and2_2_70_82(w36,C3,w122);
VLG  xor #(2) xor2_1_3_71_83(w125,w123,w124);
VLG  xor #(1) xor2_2_4_72_84(w127,w125,w126);
VLG  and #(1) and2_3_5_73_85(w128,w126,w125);
VLG  and #(1) and2_4_6_74_86(w129,w124,w123);
VLG  or #(1) or2_5_7_75_87(w130,w128,w129);
VLG endmodule
FSYM
